요구사항의 개념 및 특징

어떠한 문제를 해결하기 위해 필요한 조건이나 제약사항을 요구하는 것

- 소프트웨어 개발이나 유지 보수 과정에서 필요한 기준과 근거를 제공

- 개발하려는 소프트웨어의 전반적인 내용을 확인할 수 있게 하므로 개발에 참여하는 이해관계자들 간의 의사소통을 원활하게 하는 데 도움 줌 

- 제대로 정의되어야만 이를 토대로 이후 과정의 목표와 계획을 수립할 수 있음


요구사항의 유형

기능 요구사항 (Functional requirements)

- 시스템이 무엇을 하는지, 어떤 기능을 하는지에 대한 사항

- 시스템의 입력이나 출력으로 무엇이 포함되어야 하는지, 시스템이 어떤 데이터를 저장하거나 연산을 수행해야 하는지에 대한 사항

- 시스템이 반드시 수행해야 하는 기능

- 사용자가 시스템을 통해 제공받기를 원하는 기능


비기능 요구사항 (Non-functional requirements)

- 시스템 장비 구성 요구사항

- 성능 요구사항

- 인터페이스 요구사항

- 데이터 요구사항

- 테스트 요구사항

- 보안 요구사항

- 품질 요구사항 : 가용성, 집합성, 상호 호환성, 대응성, 신뢰성, 사용성, 유지관리성, 이식성,확장성, 보안성 등으로 구분해 기술

- 제약 사항

- 프로젝트 관리 요구사항

- 프로젝트 지원 요구사항


사용자 요구사항 (User requirements)

- 사용자 관점에서 본 시스템이 제공해야 하 요구사항

- 사용자를 위한 것으로 친숙한 표현으로 이해하기 쉽다


시스템 요구사항

- 개발자 관점에서 본 시스템 전체가 사용자와 다른 시스템에 제공해야 할 요구사항

- 사용자 요구사항에 비해 전문적이고 기술적인 용어로 표현

- 소프트웨어 요구사항이라고도 함



* 가용성 : 사용하고자 할 때 언제라도 사용할 수 있는 정도

* 정합성 : 데이터의 값이 서로 모순 없이 일관되게 일치하는 정도

* 상호 호환성 : 다른 소프트웨어와 정보를 교환할 수 있는 정도

* 대응성 : 발생한 상황에 대처하는 정도

* 이식성 : 다양한 하드웨어 환경에서도 운용 가능하도록 쉽게 수정될 수 있는 정도

* 확장성 : 규모나 범위를 넓힐 수 있는 정도



요구사항 개발 프로세스 / 순서 중요★

개발 대상에 대한 요구사항을 체계적으로 도출하고 이를 분석한 후 분석 결과를 명세서에 정리한 다음 마지막으로 이를 확인 및 검증하는 일련의 구조화된 활동

- 요구사항 개발은 요구공학의 한 요소



☞ 요구공학

무엇을 개발해야 하는지 요구사항을 정의하고, 분석 및 관리하는 프로세스를 연구하는 학문



1. 요구사항 도출(Requirement Elicitation, 요구사항 수집)

시스템, 사용자, 그리고 시스템 개발에 관련된 사람들이 서로 의견을 교환하여 요구사항이 어디에 있는지, 어떻게 수집할 것인지를 식별하고 이해하는 과정

- 요구사항 도출 단계에서 개발자와 고객 사이의 관계가 만들어지고 이해관계자가 식별됨

- 이 단계에서는 다양한 이해관계자 간의 효율적인 의사소통이 중요함

- 요구사항을 도출하는 주요 기법 : 인터뷰, 설문, 브레인스토밍, 프로토타이핑, 유스케이스 등

＊ 브레인 스토밍(Brain Storming) : 3인 이상이 자유롭게 의견을 교환하며 독창적인 아이디어 산출해 내는 방법

＊ 프로토타이핑(Prototyping) : 프로토타입을 통해 효과적으로 요구 분석을 수행하면서 명세서를 산출하는 작업

＊ 유스케이스(Use Case) : 사용자의 요구사항을 기능 단위로 표현하는 것



2. 요구사항 분석(Requirement Analysis)

개발 대상에 대한 사용자의 요구사항 중 명확하지 않거나 모호하여 이해되지 않는 부분을 발견하고 이를 걸러내기 위한 과정

- 사용자 요구사항의 타당성을 조사하고 비용과 일정에 대한 제약을 설정

- 도출된 요구사항들을 토대로 소프트웨어의 범위 파악, 소프트웨어와 주변 환경이 상호 작용하는 방법 이해



3. 요구사항 명세(Requirement Specification, 요구사항 문서화)

요구사항을 체계적으로 분석한 후 승인될 수 있도록 문서화하는 것

- 사용자 요구사항의 타당성을 조사하고 비용과 일정에 대한 제약을 설정

- 도출된 요구사항들을 토대로 소프트웨어의 범위 파악, 소프트웨어와 주변 환경이 상호 작용하는 방법 이해



4. 요구사항 확인(Requirement Validation, 요구사항 검증)

개발 자원을 요구사항에 할당하기 전에 요구사항 명세서가 정확하고 완전하게 작성되었는지 검토하는 활동

- 요구사항 문서는 이해관계자들이 검토해야 함

- 일반적으로 요구사항 관리 도구를 이용하여 교구사항 정의 문서들에 대해 형상 관리를 수행

＊ 형상 관리(SCM; Software Configuration Management) : 소프트웨어의 개발 과정에서 만들어지는 형상들의 변경 사항을 관리하는 일련의 활동 



요구사항 분석 기법

요구사항 중 명확하지 않거나 모호한 부분을 걸러내기 위한 방법

- 요구사항 분석 기법 : 요구사항 분류, 개념 모델링, 요구사항 할당, 요구사항 협상, 정형 분석 등



1. 요구사항 분류(Requirement Classification)



2. 개념 모델링(Conceptual Modeling)

요구사항을 보다 쉽게 이해할 수 있도록 현실 세계의 상황을 단순화하여 개념적으로 표현한 것을 모델이라고 하며, 이러한 모델을 만드는 과정을 모델링이라고 함

- 모델링 표기는 주로 UML(Unified Modeling Language)을 사용 함

- 요구사항을 이해하는 이해관계자별로 관점이 다양하므로 그에 맞게 개념 모델도 다양하게 표현



3. 요구사항 할당(Requirement Allocation)

요구사항을 만족시키기 위한 구성 요소를 식별하는 것



4. 요구사항 협상(Requirement Negotiation)

요구사항이 서로 충돌될 경우 이를 적절히 해결하는 과정



5. 정형 분석(Formal Analysis)

구문과 의미를 갖는 정형화된 언어를 이용해 요구사항을 수학적 기호로 표현한 후 이를 분석하는 과정



요구사항 확인 기법

요구사항 개발 과정을 거쳐 문서화된 요구사항 관련 내용을 확인하고 검증하는 방법

- 요구사항에 자원이 배정되기 전에 문제 파악을 위한 검증 수행

- 요구사항 확인 기법 : 요구사항 검토, 프로토타이핑, 모델 검증, 인수 테스트 등



1. 요구사항 검토(Requirement Reviews)

문서화된 요구사항을 훑어보면서 확인하는 것으로 가장 일반적인 요구사항 검증 방법



2. 프로토타이핑(Prototyping)

초기 도출된 요구사항을 토대로 프로토타입을 만든 후 대상 시스템의 개발이 진행되는 동안 도출되는 요구사항을 반영하면서 지속적으로 프로토타입을 재작성하는 과정

(장점)

- 빠르게 제작 가능, 반복되는 제작 통해 발전된 결과물 얻을 수 있음

- 최종 시스템을 완성하기 전 추가/변경 요구사항이나 아이디어 등에 대한 피드백 가능

- 이해하기 쉬어 사용자와 개발자 또는 개발자 사이의 의사소통 원활

- 개발된 시스템의 사용에 대한 문제점을 시스템 완성 전에 식별 가능

- 포로토타입이 개선될수록 변동 가능한 요구사항들 감소

(단점)

- 사용자의 관심이 핵심에서 벗어나 프로토타입 제작에만 집중될 수 있음

-  개발 대상의 일부만을 대상으로 프로토타입이 제작된 경우 대상 범위를 잘못 이해하여 사용성이 과대평가 될 수 있음

- 지속적이고 반복적인 프로토타입의 개선으로 인한 비용이 부담될 수 있음 





3. 모델 검증(Model Verification)

요구사항 분석 단계에서 개발된 모델이 요구사항을 충족시키는지 검증하는 것



4. 인수 테스트(Acceptance Test)

사용자가 실제로 사용될 환경에서 요구사항들이 모두 충족되는지 사용자 입장에서 확인하는 과정




UML

시스템 개발자와 고객 또는 개발자 상호간의 의사소통이 원활하게 이루어지도록 표준화한 대표적인 객체지향 모델링 언어

- Rumbaugh, Booch, Jacobson 등 객체지향 방법론의 장점을 통합, 객체 기술에 관한 국제표준화기구인 OMG에서 표준으로 지정

- UML의 구성 요소 : 사물, 관계, 다이어그램 등





사물(Things)

모델을 구성하는 가장 중요한 기본 요소, 다이어그램 안에서 관계가 형성될 수 있는 대상들을 의미

구조 사물(Structural Things)

- 시스템의 개념적, 물리적 요소 표현

- 클래스(Class), 유스케이스(Use Case), 컴포넌트(Component), 노드(Node) 등 

행동 사물(Behavioral Things)

- 시간과 공간에 따른 요소들의 행위 표현

- 상호작용(Interaction), 상태 머신(State Machine) 등 

그룹 사물(Grouping Things)

- 요소들을 그룹으로 묶어서 표현

- 패키지(Package) 

주해 사물(Annotation Things)

- 부가적인 설명이나 제약조건 등 표현

- 노트(Note) 



관계(Relationships)

사물과 사물 사이의 연관성을 표현하는 것

- 연관 관계 : 2개 이상의 사물이 서로 관련되어 있음을 표현

- 집합 관계 : 하나의 사물이 다른 사물에 포함되어 있는 관계

- 포함 관계 : 집합 관계의 특수 형태

- 일반화 관계 : 하나의 사물이 다른 사물에 비해 더 일반적인지 구체적인지 표현

- 의존 관계 : 사물 사이에 서로 연관은 있으나 필요에 의해 서로에게 영향을 주는 짧은 시간 동안만 연관을 유지하는 관계

- 실체화 관계 : 사물이 할 수 있거나 해야 하는 기능으로 서로를 그룹화 할 수 있는 관계



다이어그램(Diagram)

사물과 관계를 도형으로 표현한 것



• 구조적(Structural) 다이어그램의 종류 

- 클래스(Class) 다이어그램 : 클래스와 클래스가 가지는 속성, 관계를 표현하고 시스템의 구조 파악, 구조상의 문제점 도출

- 객체(Object) 다이어그램 

- 컴포넌트(Component) 다이어그램 : 구현 단계에서 사용

- 배치(Deployment) 다이어그램 : 물리적 요소들의 위치를 표현, 구현 단계에서 사용

- 복합체 구조(Composite Structure) 다이어그램 : 클래스나 컴포넌트가 복합 구조를 갖는 경우 그 내부 구조 표현

- 패키지(Package) 다이어그램 : 패키지들의 관계 표현



• 행위(Behavioral) 다이어그램의 종류

- 유스케이스(Use Case) 다이어그램 : 사용자의 요구를 분석하는 것으로 모델링 작업에 사용

- 시퀀스(Sequence) 다이어그램 : 상호 작용하는 시스템이나 객체들이 주고받는 메시지 표현

- 커뮤니케이션 다이어그램 : 메시지뿐만 아니라 객체들 간의 연관까지 표현

- 상태(State) 다이어그램 : 상태가 어떻게 변화하는지 표현

- 활동(Activity) 다이어그램 : 처리의 흐름을 순서에 따라 표현

- 상호작용 개요 다이어그램 : 상호작용 다이어그램 간 제어 흐름 표현

- 타이밍 다이그램 : 객체 상태 변화와 시간 제약을 명시적으로 표현